// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© abhishek_panda

//@version=5
indicator(title="Snipper Trading System", shorttitle="SNIPPER TRADE", overlay=true)

type alertMessage
    string ticker
    string signalType
    string timeFrame
    string id = "SNIPPER_TRADE"
    string title = "Snipper Trading System"
    
stringfyAlertMessage(alertMessage[] messages) =>
    string alertText = "["
    int messageSize = messages.size()
    int i = 0
    while i < messageSize
        message = messages.get(i)
        alertText += '{'+'"id":"'+message.id+'", "title":"'+message.title+'", "signalType":"'+message.signalType+'", "ticker" : "'+message.ticker+'", "timeFrame" : "'+message.timeFrame+'"}'
        if messageSize - 1 != i
            alertText +=','
        i += 1
    alertText += "]"
    alertText


len = input.int(9, minval=1, title="Length")
src = input(close, title="Source")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500)
out = ta.ema(src, len)
plot(out, title="EMA", color=color.rgb(103,58,182), linewidth=2, offset=offset)

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
smoothingLength = input.int(title = "Length", defval = 5, minval = 1, maxval = 100, group="Smoothing")

smoothingLine = ma(out, smoothingLength, typeMA)
plot(smoothingLine, title="Smoothing Line", color=color.rgb(255,235,58), linewidth=2,offset=offset)

tradingperiod = "0915-1510"
tradingtime = time(timeframe.period, tradingperiod)
tradingtimecondition = not na(tradingtime)
buyenter = ta.crossover(out, smoothingLine) and tradingtimecondition
buyexit = ta.crossunder(out, smoothingLine) and tradingtimecondition
buyzone = (out > smoothingLine) and tradingtimecondition

sellenter = ta.crossover(smoothingLine, out) and tradingtimecondition
sellexit = ta.crossunder(smoothingLine, out) and tradingtimecondition
sellzone = (smoothingLine > out) and tradingtimecondition

plotshape(buyenter, title = "SHAPE", style = shape.triangleup, location = location.abovebar, color = color.rgb(32, 145, 36), text = "Enter", textcolor = color.rgb(32, 145, 36), size = size.small)
plotshape(buyexit, title = "SHAPE", style = shape.xcross, location = location.abovebar, color = color.rgb(32, 145, 36), text = "Exit", textcolor = color.rgb(32, 145, 36), size = size.small)

plotshape(sellenter, title = "SHAPE", style = shape.triangledown, location = location.belowbar, color = color.rgb(196, 28, 28), text = "Enter", textcolor = color.rgb(196, 28, 28), size = size.small)
plotshape(sellexit, title = "SHAPE", style = shape.xcross, location = location.belowbar, color = color.rgb(196, 28, 28), text = "Exit", textcolor = color.rgb(196, 28, 28), size = size.small)

bgcolor(buyzone ? color.rgb(33,145,36, 93) : na)
bgcolor(sellzone ? color.rgb(196,28,29, 93) : na)

// For Bullish
if sellexit and buyenter
    exitmsg = alertMessage.new(syminfo.ticker, "sellexit", timeframe.period)
    entermsg = alertMessage.new(syminfo.ticker, "buyenter", timeframe.period)
    array<alertMessage> msgArray = array.from(exitmsg, entermsg)
    alert(stringfyAlertMessage(msgArray), alert.freq_once_per_bar_close)


// For Bearish
if buyexit and sellenter
    exitmsg = alertMessage.new(syminfo.ticker, "buyexit", timeframe.period)
    entermsg = alertMessage.new(syminfo.ticker, "sellenter", timeframe.period)
    array<alertMessage> msgArray = array.from(exitmsg, entermsg)
    alert(stringfyAlertMessage(msgArray), alert.freq_once_per_bar_close)
